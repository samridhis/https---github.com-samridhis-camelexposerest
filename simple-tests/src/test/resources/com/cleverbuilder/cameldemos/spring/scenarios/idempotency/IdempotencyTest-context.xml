<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring-3.0.0.xsd
    ">

  <!-- Configures a simple, ephemeral in-memory database for storing message IDs -->
  <!-- This stores entries in a Map structure; single instance so no clustering support -->
  <!-- Cluster-aware alternatives include JdbcMessageIdRepository, JpaMessageIdRepository, InfinispanIdempotentRepository, etc. -->
  <bean id="inmemoryRepository"
        class="org.apache.camel.support.processor.idempotent.MemoryIdempotentRepository"/>


  <camelContext xmlns="http://camel.apache.org/schema/spring">

    <route>
      <from uri="direct:start"/>
      <setHeader name="CompoundMessageKey">
        <simple>${header.X-MY-Source}-${header.X-MY-Destination}-${header.X-MY-Class}-${header.X-MY-SeqNo}</simple>
      </setHeader>
      <log message="Derived message key: ${header.CompoundMessageKey}"/>

      <idempotentConsumer messageIdRepositoryRef="inmemoryRepository">
        <header>CompoundMessageKey</header>
        <log message="Processing this message"/>
        <to uri="mock:process"/>
      </idempotentConsumer>

    </route>
  </camelContext>

</beans>